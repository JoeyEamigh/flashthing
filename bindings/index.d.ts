/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class FlashThing {
  constructor(callback: (event: FlashEvent) => void, options?: FlashThingOptions)
  openDirectory(path: string): Promise<void>
  openArchive(path: string): Promise<void>
  openJson(json: string): Promise<void>
  openStockDirectory(path: string): Promise<void>
  openStockArchive(path: string): Promise<void>
  /** Method to get total number of steps */
  getNumSteps(): number
  /**  Method to flash with progress callback */
  flash(): Promise<void>
  /** Utility method to unbrick a device */
  unbrick(): Promise<void>
}

export interface Bl2BootValue {
  bl2: DataOrFile
  bootloader: DataOrFile
}

export type DataOrFile =
  | { type: 'Data' }
  | { type: 'File', file: MetaFile }

export declare const enum DeviceMode {
  Normal = 'Normal',
  Usb = 'Usb',
  UsbBurn = 'UsbBurn',
  NotFound = 'NotFound'
}

export type FlashEvent =
  | { type: 'Log', data: LogMessage }
  | { type: 'FindingDevice' }
  | { type: 'DeviceMode', mode: DeviceMode }
  | { type: 'Connecting' }
  | { type: 'Connected' }
  | { type: 'Bl2Boot' }
  | { type: 'Resetting' }
  | { type: 'StepChanged', step: number, data: FlashStep }
  | { type: 'FlashInfo', data: FlashProgress }

export interface FlashProgress {
  /** percent complete */
  percent: number
  /** elapsed time in milliseconds */
  elapsed: number
  /** estimated flash time left in milliseconds */
  eta: number
  /** rate in kib/s */
  rate: number
  /** average chunk time in milliseconds */
  avgChunkTime: number
  /** average rate in kib/s */
  avgRate: number
}

export type FlashStep =
  | { type: 'Identify', variable?: string }
  | { type: 'Bulkcmd', value: string }
  | { type: 'BulkcmdStat', value: string, variable?: string }
  | { type: 'Run', value: RunValue }
  | { type: 'WriteSimpleMemory', value: WriteSimpleMemoryValue }
  | { type: 'WriteLargeMemory', value: WriteLargeMemoryValue }
  | { type: 'ReadSimpleMemory', value: ReadMemoryValue, variable?: string }
  | { type: 'ReadLargeMemory', value: ReadMemoryValue, variable?: string }
  | { type: 'GetBootAmlc', variable?: string }
  | { type: 'WriteAmlcData', value: WriteAmlcDataValue }
  | { type: 'Bl2Boot', value: Bl2BootValue }
  | { type: 'ValidatePartitionSize', value: ValidatePartitionSizeValue, variable?: string }
  | { type: 'RestorePartition', value: RestorePartitionValue }
  | { type: 'WriteEnv', value: StringOrFile }
  | { type: 'Log', value: string }
  | { type: 'Wait', value: WaitValue }

export interface FlashThingOptions {
  logLevelDirective?: string
}

export interface LogMessage {
  /** log level (TRACE, DEBUG, INFO, WARN, ERROR) */
  level: string
  /** log target */
  target: string
  /** log message */
  message: string
  /** timestamp in ISO 8601 format */
  timestamp: string
}

export interface MetaFile {
  filePath: string
  encoding?: string
}

export interface ReadMemoryValue {
  address: number
  length: number
}

export interface RestorePartitionValue {
  name: string
  data: DataOrFile
}

export interface RunValue {
  address: number
  keepPower?: boolean
}

export type StringOrFile =
  | { type: 'String', string: string }
  | { type: 'File', file: MetaFile }

export interface ValidatePartitionSizeValue {
  name: string
}

export type WaitValue =
  | { type: 'UserInput', message: string }
  | { type: 'Time', time: number }

export interface WriteAmlcDataValue {
  seq: number
  amlcOffset: number
  data: DataOrFile
}

export interface WriteLargeMemoryValue {
  address: number
  data: DataOrFile
  blockLength: number
  appendZeros?: boolean
}

export interface WriteSimpleMemoryValue {
  address: number
  data: DataOrFile
}
